/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/_login'
import { Route as LayoutImport } from './routes/_layout'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const LoginLoginLazyImport = createFileRoute('/_login/login')()
const LayoutAboutLazyImport = createFileRoute('/_layout/about')()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/_login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const LoginLoginLazyRoute = LoginLoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => LoginRoute,
} as any).lazy(() => import('./routes/_login.login.lazy').then((d) => d.Route))

const LayoutAboutLazyRoute = LayoutAboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => LayoutRoute,
} as any).lazy(() => import('./routes/_layout.about.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_login': {
      id: '/_login'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_layout/about': {
      id: '/_layout/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof LayoutAboutLazyImport
      parentRoute: typeof LayoutImport
    }
    '/_login/login': {
      id: '/_login/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLoginLazyImport
      parentRoute: typeof LoginImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutAboutLazyRoute: typeof LayoutAboutLazyRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAboutLazyRoute: LayoutAboutLazyRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface LoginRouteChildren {
  LoginLoginLazyRoute: typeof LoginLoginLazyRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginLoginLazyRoute: LoginLoginLazyRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof LoginRouteWithChildren
  '/about': typeof LayoutAboutLazyRoute
  '/login': typeof LoginLoginLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof LoginRouteWithChildren
  '/about': typeof LayoutAboutLazyRoute
  '/login': typeof LoginLoginLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_login': typeof LoginRouteWithChildren
  '/_layout/about': typeof LayoutAboutLazyRoute
  '/_login/login': typeof LoginLoginLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/about' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/about' | '/login'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_login'
    | '/_layout/about'
    | '/_login/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_layout",
        "/_login"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/_layout": {
      "filePath": "_layout.jsx",
      "children": [
        "/_layout/about"
      ]
    },
    "/_login": {
      "filePath": "_login.jsx",
      "children": [
        "/_login/login"
      ]
    },
    "/_layout/about": {
      "filePath": "_layout.about.lazy.jsx",
      "parent": "/_layout"
    },
    "/_login/login": {
      "filePath": "_login.login.lazy.jsx",
      "parent": "/_login"
    }
  }
}
ROUTE_MANIFEST_END */
